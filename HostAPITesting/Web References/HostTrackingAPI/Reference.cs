//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace HostAPITesting.HostTrackingAPI {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HttpTaskServiceSoap", Namespace="http://www.host-tracker.com/Services")]
    public partial class HttpTaskService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private AuthHeader authHeaderValueField;
        
        private System.Threading.SendOrPostCallback GetTaskWithUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksWithUrlsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStatusForTaskWithUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStatusForTasksWithUrlsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUrlForTaskWithUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateIntervalForTaskWithUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateIntervalForTasksWithUrlsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePostDataForPostTaskWithUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePostDataForPostTasksWithUrlsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskWithUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskWithUrlsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateHttpHeadTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateHttpHeadTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateHttpGetTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateHttpGetTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateHttpPostTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateHttpPostTasksWithSamePostDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskIntervalOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public HttpTaskService() {
            this.Url = global::HostAPITesting.Properties.Settings.Default.HostAPITesting_HostTrackingAPI_HttpTaskService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public AuthHeader AuthHeaderValue {
            get {
                return this.authHeaderValueField;
            }
            set {
                this.authHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTaskWithUrlCompletedEventHandler GetTaskWithUrlCompleted;
        
        /// <remarks/>
        public event GetTasksWithUrlsCompletedEventHandler GetTasksWithUrlsCompleted;
        
        /// <remarks/>
        public event UpdateStatusForTaskWithUrlCompletedEventHandler UpdateStatusForTaskWithUrlCompleted;
        
        /// <remarks/>
        public event UpdateStatusForTasksWithUrlsCompletedEventHandler UpdateStatusForTasksWithUrlsCompleted;
        
        /// <remarks/>
        public event UpdateUrlForTaskWithUrlCompletedEventHandler UpdateUrlForTaskWithUrlCompleted;
        
        /// <remarks/>
        public event UpdateIntervalForTaskWithUrlCompletedEventHandler UpdateIntervalForTaskWithUrlCompleted;
        
        /// <remarks/>
        public event UpdateIntervalForTasksWithUrlsCompletedEventHandler UpdateIntervalForTasksWithUrlsCompleted;
        
        /// <remarks/>
        public event UpdatePostDataForPostTaskWithUrlCompletedEventHandler UpdatePostDataForPostTaskWithUrlCompleted;
        
        /// <remarks/>
        public event UpdatePostDataForPostTasksWithUrlsCompletedEventHandler UpdatePostDataForPostTasksWithUrlsCompleted;
        
        /// <remarks/>
        public event DeleteTaskWithUrlCompletedEventHandler DeleteTaskWithUrlCompleted;
        
        /// <remarks/>
        public event DeleteTaskWithUrlsCompletedEventHandler DeleteTaskWithUrlsCompleted;
        
        /// <remarks/>
        public event CreateHttpHeadTaskCompletedEventHandler CreateHttpHeadTaskCompleted;
        
        /// <remarks/>
        public event CreateHttpHeadTasksCompletedEventHandler CreateHttpHeadTasksCompleted;
        
        /// <remarks/>
        public event CreateHttpGetTaskCompletedEventHandler CreateHttpGetTaskCompleted;
        
        /// <remarks/>
        public event CreateHttpGetTasksCompletedEventHandler CreateHttpGetTasksCompleted;
        
        /// <remarks/>
        public event CreateHttpPostTaskCompletedEventHandler CreateHttpPostTaskCompleted;
        
        /// <remarks/>
        public event CreateHttpPostTasksWithSamePostDataCompletedEventHandler CreateHttpPostTasksWithSamePostDataCompleted;
        
        /// <remarks/>
        public event UpdateTaskUrlCompletedEventHandler UpdateTaskUrlCompleted;
        
        /// <remarks/>
        public event UpdateTaskIntervalCompletedEventHandler UpdateTaskIntervalCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/GetTaskWithUrl", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task GetTaskWithUrl(string url) {
            object[] results = this.Invoke("GetTaskWithUrl", new object[] {
                        url});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskWithUrlAsync(string url) {
            this.GetTaskWithUrlAsync(url, null);
        }
        
        /// <remarks/>
        public void GetTaskWithUrlAsync(string url, object userState) {
            if ((this.GetTaskWithUrlOperationCompleted == null)) {
                this.GetTaskWithUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskWithUrlOperationCompleted);
            }
            this.InvokeAsync("GetTaskWithUrl", new object[] {
                        url}, this.GetTaskWithUrlOperationCompleted, userState);
        }
        
        private void OnGetTaskWithUrlOperationCompleted(object arg) {
            if ((this.GetTaskWithUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskWithUrlCompleted(this, new GetTaskWithUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/GetTasksWithUrls", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task[] GetTasksWithUrls(string[] urls) {
            object[] results = this.Invoke("GetTasksWithUrls", new object[] {
                        urls});
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksWithUrlsAsync(string[] urls) {
            this.GetTasksWithUrlsAsync(urls, null);
        }
        
        /// <remarks/>
        public void GetTasksWithUrlsAsync(string[] urls, object userState) {
            if ((this.GetTasksWithUrlsOperationCompleted == null)) {
                this.GetTasksWithUrlsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksWithUrlsOperationCompleted);
            }
            this.InvokeAsync("GetTasksWithUrls", new object[] {
                        urls}, this.GetTasksWithUrlsOperationCompleted, userState);
        }
        
        private void OnGetTasksWithUrlsOperationCompleted(object arg) {
            if ((this.GetTasksWithUrlsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksWithUrlsCompleted(this, new GetTasksWithUrlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/UpdateStatusForTaskWithUrl", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task UpdateStatusForTaskWithUrl(string url, bool isEnabled) {
            object[] results = this.Invoke("UpdateStatusForTaskWithUrl", new object[] {
                        url,
                        isEnabled});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateStatusForTaskWithUrlAsync(string url, bool isEnabled) {
            this.UpdateStatusForTaskWithUrlAsync(url, isEnabled, null);
        }
        
        /// <remarks/>
        public void UpdateStatusForTaskWithUrlAsync(string url, bool isEnabled, object userState) {
            if ((this.UpdateStatusForTaskWithUrlOperationCompleted == null)) {
                this.UpdateStatusForTaskWithUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStatusForTaskWithUrlOperationCompleted);
            }
            this.InvokeAsync("UpdateStatusForTaskWithUrl", new object[] {
                        url,
                        isEnabled}, this.UpdateStatusForTaskWithUrlOperationCompleted, userState);
        }
        
        private void OnUpdateStatusForTaskWithUrlOperationCompleted(object arg) {
            if ((this.UpdateStatusForTaskWithUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStatusForTaskWithUrlCompleted(this, new UpdateStatusForTaskWithUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/UpdateStatusForTasksWithUrls", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task[] UpdateStatusForTasksWithUrls(string[] urls, bool isEnabled) {
            object[] results = this.Invoke("UpdateStatusForTasksWithUrls", new object[] {
                        urls,
                        isEnabled});
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateStatusForTasksWithUrlsAsync(string[] urls, bool isEnabled) {
            this.UpdateStatusForTasksWithUrlsAsync(urls, isEnabled, null);
        }
        
        /// <remarks/>
        public void UpdateStatusForTasksWithUrlsAsync(string[] urls, bool isEnabled, object userState) {
            if ((this.UpdateStatusForTasksWithUrlsOperationCompleted == null)) {
                this.UpdateStatusForTasksWithUrlsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStatusForTasksWithUrlsOperationCompleted);
            }
            this.InvokeAsync("UpdateStatusForTasksWithUrls", new object[] {
                        urls,
                        isEnabled}, this.UpdateStatusForTasksWithUrlsOperationCompleted, userState);
        }
        
        private void OnUpdateStatusForTasksWithUrlsOperationCompleted(object arg) {
            if ((this.UpdateStatusForTasksWithUrlsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStatusForTasksWithUrlsCompleted(this, new UpdateStatusForTasksWithUrlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/UpdateUrlForTaskWithUrl", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task UpdateUrlForTaskWithUrl(string url, string newUrl) {
            object[] results = this.Invoke("UpdateUrlForTaskWithUrl", new object[] {
                        url,
                        newUrl});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUrlForTaskWithUrlAsync(string url, string newUrl) {
            this.UpdateUrlForTaskWithUrlAsync(url, newUrl, null);
        }
        
        /// <remarks/>
        public void UpdateUrlForTaskWithUrlAsync(string url, string newUrl, object userState) {
            if ((this.UpdateUrlForTaskWithUrlOperationCompleted == null)) {
                this.UpdateUrlForTaskWithUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUrlForTaskWithUrlOperationCompleted);
            }
            this.InvokeAsync("UpdateUrlForTaskWithUrl", new object[] {
                        url,
                        newUrl}, this.UpdateUrlForTaskWithUrlOperationCompleted, userState);
        }
        
        private void OnUpdateUrlForTaskWithUrlOperationCompleted(object arg) {
            if ((this.UpdateUrlForTaskWithUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUrlForTaskWithUrlCompleted(this, new UpdateUrlForTaskWithUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/UpdateIntervalForTaskWithUrl", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task UpdateIntervalForTaskWithUrl(string url, int interval) {
            object[] results = this.Invoke("UpdateIntervalForTaskWithUrl", new object[] {
                        url,
                        interval});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateIntervalForTaskWithUrlAsync(string url, int interval) {
            this.UpdateIntervalForTaskWithUrlAsync(url, interval, null);
        }
        
        /// <remarks/>
        public void UpdateIntervalForTaskWithUrlAsync(string url, int interval, object userState) {
            if ((this.UpdateIntervalForTaskWithUrlOperationCompleted == null)) {
                this.UpdateIntervalForTaskWithUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateIntervalForTaskWithUrlOperationCompleted);
            }
            this.InvokeAsync("UpdateIntervalForTaskWithUrl", new object[] {
                        url,
                        interval}, this.UpdateIntervalForTaskWithUrlOperationCompleted, userState);
        }
        
        private void OnUpdateIntervalForTaskWithUrlOperationCompleted(object arg) {
            if ((this.UpdateIntervalForTaskWithUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateIntervalForTaskWithUrlCompleted(this, new UpdateIntervalForTaskWithUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/UpdateIntervalForTasksWithUrls", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task UpdateIntervalForTasksWithUrls(string[] urls, int interval) {
            object[] results = this.Invoke("UpdateIntervalForTasksWithUrls", new object[] {
                        urls,
                        interval});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateIntervalForTasksWithUrlsAsync(string[] urls, int interval) {
            this.UpdateIntervalForTasksWithUrlsAsync(urls, interval, null);
        }
        
        /// <remarks/>
        public void UpdateIntervalForTasksWithUrlsAsync(string[] urls, int interval, object userState) {
            if ((this.UpdateIntervalForTasksWithUrlsOperationCompleted == null)) {
                this.UpdateIntervalForTasksWithUrlsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateIntervalForTasksWithUrlsOperationCompleted);
            }
            this.InvokeAsync("UpdateIntervalForTasksWithUrls", new object[] {
                        urls,
                        interval}, this.UpdateIntervalForTasksWithUrlsOperationCompleted, userState);
        }
        
        private void OnUpdateIntervalForTasksWithUrlsOperationCompleted(object arg) {
            if ((this.UpdateIntervalForTasksWithUrlsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateIntervalForTasksWithUrlsCompleted(this, new UpdateIntervalForTasksWithUrlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/UpdatePostDataForPostTaskWithUrl", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task UpdatePostDataForPostTaskWithUrl(string url, string postData) {
            object[] results = this.Invoke("UpdatePostDataForPostTaskWithUrl", new object[] {
                        url,
                        postData});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePostDataForPostTaskWithUrlAsync(string url, string postData) {
            this.UpdatePostDataForPostTaskWithUrlAsync(url, postData, null);
        }
        
        /// <remarks/>
        public void UpdatePostDataForPostTaskWithUrlAsync(string url, string postData, object userState) {
            if ((this.UpdatePostDataForPostTaskWithUrlOperationCompleted == null)) {
                this.UpdatePostDataForPostTaskWithUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePostDataForPostTaskWithUrlOperationCompleted);
            }
            this.InvokeAsync("UpdatePostDataForPostTaskWithUrl", new object[] {
                        url,
                        postData}, this.UpdatePostDataForPostTaskWithUrlOperationCompleted, userState);
        }
        
        private void OnUpdatePostDataForPostTaskWithUrlOperationCompleted(object arg) {
            if ((this.UpdatePostDataForPostTaskWithUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePostDataForPostTaskWithUrlCompleted(this, new UpdatePostDataForPostTaskWithUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/UpdatePostDataForPostTasksWithUrls", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task UpdatePostDataForPostTasksWithUrls(string[] urls, string postData) {
            object[] results = this.Invoke("UpdatePostDataForPostTasksWithUrls", new object[] {
                        urls,
                        postData});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePostDataForPostTasksWithUrlsAsync(string[] urls, string postData) {
            this.UpdatePostDataForPostTasksWithUrlsAsync(urls, postData, null);
        }
        
        /// <remarks/>
        public void UpdatePostDataForPostTasksWithUrlsAsync(string[] urls, string postData, object userState) {
            if ((this.UpdatePostDataForPostTasksWithUrlsOperationCompleted == null)) {
                this.UpdatePostDataForPostTasksWithUrlsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePostDataForPostTasksWithUrlsOperationCompleted);
            }
            this.InvokeAsync("UpdatePostDataForPostTasksWithUrls", new object[] {
                        urls,
                        postData}, this.UpdatePostDataForPostTasksWithUrlsOperationCompleted, userState);
        }
        
        private void OnUpdatePostDataForPostTasksWithUrlsOperationCompleted(object arg) {
            if ((this.UpdatePostDataForPostTasksWithUrlsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePostDataForPostTasksWithUrlsCompleted(this, new UpdatePostDataForPostTasksWithUrlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/DeleteTaskWithUrl", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task[] DeleteTaskWithUrl(string url) {
            object[] results = this.Invoke("DeleteTaskWithUrl", new object[] {
                        url});
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskWithUrlAsync(string url) {
            this.DeleteTaskWithUrlAsync(url, null);
        }
        
        /// <remarks/>
        public void DeleteTaskWithUrlAsync(string url, object userState) {
            if ((this.DeleteTaskWithUrlOperationCompleted == null)) {
                this.DeleteTaskWithUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskWithUrlOperationCompleted);
            }
            this.InvokeAsync("DeleteTaskWithUrl", new object[] {
                        url}, this.DeleteTaskWithUrlOperationCompleted, userState);
        }
        
        private void OnDeleteTaskWithUrlOperationCompleted(object arg) {
            if ((this.DeleteTaskWithUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskWithUrlCompleted(this, new DeleteTaskWithUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/DeleteTaskWithUrls", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task[] DeleteTaskWithUrls(string[] urls) {
            object[] results = this.Invoke("DeleteTaskWithUrls", new object[] {
                        urls});
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskWithUrlsAsync(string[] urls) {
            this.DeleteTaskWithUrlsAsync(urls, null);
        }
        
        /// <remarks/>
        public void DeleteTaskWithUrlsAsync(string[] urls, object userState) {
            if ((this.DeleteTaskWithUrlsOperationCompleted == null)) {
                this.DeleteTaskWithUrlsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskWithUrlsOperationCompleted);
            }
            this.InvokeAsync("DeleteTaskWithUrls", new object[] {
                        urls}, this.DeleteTaskWithUrlsOperationCompleted, userState);
        }
        
        private void OnDeleteTaskWithUrlsOperationCompleted(object arg) {
            if ((this.DeleteTaskWithUrlsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskWithUrlsCompleted(this, new DeleteTaskWithUrlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/CreateHttpHeadTask", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task CreateHttpHeadTask(string url, int interval) {
            object[] results = this.Invoke("CreateHttpHeadTask", new object[] {
                        url,
                        interval});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void CreateHttpHeadTaskAsync(string url, int interval) {
            this.CreateHttpHeadTaskAsync(url, interval, null);
        }
        
        /// <remarks/>
        public void CreateHttpHeadTaskAsync(string url, int interval, object userState) {
            if ((this.CreateHttpHeadTaskOperationCompleted == null)) {
                this.CreateHttpHeadTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateHttpHeadTaskOperationCompleted);
            }
            this.InvokeAsync("CreateHttpHeadTask", new object[] {
                        url,
                        interval}, this.CreateHttpHeadTaskOperationCompleted, userState);
        }
        
        private void OnCreateHttpHeadTaskOperationCompleted(object arg) {
            if ((this.CreateHttpHeadTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateHttpHeadTaskCompleted(this, new CreateHttpHeadTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/CreateHttpHeadTasks", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BatchTaskOperationResult CreateHttpHeadTasks(string[] urls, int interval, bool returnBadFormatedData) {
            object[] results = this.Invoke("CreateHttpHeadTasks", new object[] {
                        urls,
                        interval,
                        returnBadFormatedData});
            return ((BatchTaskOperationResult)(results[0]));
        }
        
        /// <remarks/>
        public void CreateHttpHeadTasksAsync(string[] urls, int interval, bool returnBadFormatedData) {
            this.CreateHttpHeadTasksAsync(urls, interval, returnBadFormatedData, null);
        }
        
        /// <remarks/>
        public void CreateHttpHeadTasksAsync(string[] urls, int interval, bool returnBadFormatedData, object userState) {
            if ((this.CreateHttpHeadTasksOperationCompleted == null)) {
                this.CreateHttpHeadTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateHttpHeadTasksOperationCompleted);
            }
            this.InvokeAsync("CreateHttpHeadTasks", new object[] {
                        urls,
                        interval,
                        returnBadFormatedData}, this.CreateHttpHeadTasksOperationCompleted, userState);
        }
        
        private void OnCreateHttpHeadTasksOperationCompleted(object arg) {
            if ((this.CreateHttpHeadTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateHttpHeadTasksCompleted(this, new CreateHttpHeadTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/CreateHttpGetTask", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task CreateHttpGetTask(string url, int interval) {
            object[] results = this.Invoke("CreateHttpGetTask", new object[] {
                        url,
                        interval});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void CreateHttpGetTaskAsync(string url, int interval) {
            this.CreateHttpGetTaskAsync(url, interval, null);
        }
        
        /// <remarks/>
        public void CreateHttpGetTaskAsync(string url, int interval, object userState) {
            if ((this.CreateHttpGetTaskOperationCompleted == null)) {
                this.CreateHttpGetTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateHttpGetTaskOperationCompleted);
            }
            this.InvokeAsync("CreateHttpGetTask", new object[] {
                        url,
                        interval}, this.CreateHttpGetTaskOperationCompleted, userState);
        }
        
        private void OnCreateHttpGetTaskOperationCompleted(object arg) {
            if ((this.CreateHttpGetTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateHttpGetTaskCompleted(this, new CreateHttpGetTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/CreateHttpGetTasks", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BatchTaskOperationResult CreateHttpGetTasks(string[] urls, int interval, bool returnBadFormatedData) {
            object[] results = this.Invoke("CreateHttpGetTasks", new object[] {
                        urls,
                        interval,
                        returnBadFormatedData});
            return ((BatchTaskOperationResult)(results[0]));
        }
        
        /// <remarks/>
        public void CreateHttpGetTasksAsync(string[] urls, int interval, bool returnBadFormatedData) {
            this.CreateHttpGetTasksAsync(urls, interval, returnBadFormatedData, null);
        }
        
        /// <remarks/>
        public void CreateHttpGetTasksAsync(string[] urls, int interval, bool returnBadFormatedData, object userState) {
            if ((this.CreateHttpGetTasksOperationCompleted == null)) {
                this.CreateHttpGetTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateHttpGetTasksOperationCompleted);
            }
            this.InvokeAsync("CreateHttpGetTasks", new object[] {
                        urls,
                        interval,
                        returnBadFormatedData}, this.CreateHttpGetTasksOperationCompleted, userState);
        }
        
        private void OnCreateHttpGetTasksOperationCompleted(object arg) {
            if ((this.CreateHttpGetTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateHttpGetTasksCompleted(this, new CreateHttpGetTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/CreateHttpPostTask", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task CreateHttpPostTask(string url, int interval, string postData) {
            object[] results = this.Invoke("CreateHttpPostTask", new object[] {
                        url,
                        interval,
                        postData});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void CreateHttpPostTaskAsync(string url, int interval, string postData) {
            this.CreateHttpPostTaskAsync(url, interval, postData, null);
        }
        
        /// <remarks/>
        public void CreateHttpPostTaskAsync(string url, int interval, string postData, object userState) {
            if ((this.CreateHttpPostTaskOperationCompleted == null)) {
                this.CreateHttpPostTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateHttpPostTaskOperationCompleted);
            }
            this.InvokeAsync("CreateHttpPostTask", new object[] {
                        url,
                        interval,
                        postData}, this.CreateHttpPostTaskOperationCompleted, userState);
        }
        
        private void OnCreateHttpPostTaskOperationCompleted(object arg) {
            if ((this.CreateHttpPostTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateHttpPostTaskCompleted(this, new CreateHttpPostTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/CreateHttpPostTasksWithSamePostData", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BatchTaskOperationResult CreateHttpPostTasksWithSamePostData(string[] urls, int interval, string postData, bool returnBadFormatedData) {
            object[] results = this.Invoke("CreateHttpPostTasksWithSamePostData", new object[] {
                        urls,
                        interval,
                        postData,
                        returnBadFormatedData});
            return ((BatchTaskOperationResult)(results[0]));
        }
        
        /// <remarks/>
        public void CreateHttpPostTasksWithSamePostDataAsync(string[] urls, int interval, string postData, bool returnBadFormatedData) {
            this.CreateHttpPostTasksWithSamePostDataAsync(urls, interval, postData, returnBadFormatedData, null);
        }
        
        /// <remarks/>
        public void CreateHttpPostTasksWithSamePostDataAsync(string[] urls, int interval, string postData, bool returnBadFormatedData, object userState) {
            if ((this.CreateHttpPostTasksWithSamePostDataOperationCompleted == null)) {
                this.CreateHttpPostTasksWithSamePostDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateHttpPostTasksWithSamePostDataOperationCompleted);
            }
            this.InvokeAsync("CreateHttpPostTasksWithSamePostData", new object[] {
                        urls,
                        interval,
                        postData,
                        returnBadFormatedData}, this.CreateHttpPostTasksWithSamePostDataOperationCompleted, userState);
        }
        
        private void OnCreateHttpPostTasksWithSamePostDataOperationCompleted(object arg) {
            if ((this.CreateHttpPostTasksWithSamePostDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateHttpPostTasksWithSamePostDataCompleted(this, new CreateHttpPostTasksWithSamePostDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/UpdateTaskUrl", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task UpdateTaskUrl(System.Guid id, string url) {
            object[] results = this.Invoke("UpdateTaskUrl", new object[] {
                        id,
                        url});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTaskUrlAsync(System.Guid id, string url) {
            this.UpdateTaskUrlAsync(id, url, null);
        }
        
        /// <remarks/>
        public void UpdateTaskUrlAsync(System.Guid id, string url, object userState) {
            if ((this.UpdateTaskUrlOperationCompleted == null)) {
                this.UpdateTaskUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskUrlOperationCompleted);
            }
            this.InvokeAsync("UpdateTaskUrl", new object[] {
                        id,
                        url}, this.UpdateTaskUrlOperationCompleted, userState);
        }
        
        private void OnUpdateTaskUrlOperationCompleted(object arg) {
            if ((this.UpdateTaskUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskUrlCompleted(this, new UpdateTaskUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.host-tracker.com/Services/UpdateTaskInterval", RequestNamespace="http://www.host-tracker.com/Services", ResponseNamespace="http://www.host-tracker.com/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task UpdateTaskInterval(System.Guid id, int interval) {
            object[] results = this.Invoke("UpdateTaskInterval", new object[] {
                        id,
                        interval});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTaskIntervalAsync(System.Guid id, int interval) {
            this.UpdateTaskIntervalAsync(id, interval, null);
        }
        
        /// <remarks/>
        public void UpdateTaskIntervalAsync(System.Guid id, int interval, object userState) {
            if ((this.UpdateTaskIntervalOperationCompleted == null)) {
                this.UpdateTaskIntervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskIntervalOperationCompleted);
            }
            this.InvokeAsync("UpdateTaskInterval", new object[] {
                        id,
                        interval}, this.UpdateTaskIntervalOperationCompleted, userState);
        }
        
        private void OnUpdateTaskIntervalOperationCompleted(object arg) {
            if ((this.UpdateTaskIntervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskIntervalCompleted(this, new UpdateTaskIntervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.host-tracker.com/Services", IsNullable=false)]
    public partial class AuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string loginField;
        
        private string passwordField;
        
        private string ticketField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string ticket {
            get {
                return this.ticketField;
            }
            set {
                this.ticketField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class BadTaskEditableData {
        
        private int indexField;
        
        private System.Nullable<System.Guid> taskIdField;
        
        private string codeField;
        
        private string messageField;
        
        /// <remarks/>
        public int index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> taskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class BatchTaskOperationResult {
        
        private Task[] tasksField;
        
        private BadTaskEditableData[] badTaskEditableDataField;
        
        /// <remarks/>
        public Task[] tasks {
            get {
                return this.tasksField;
            }
            set {
                this.tasksField = value;
            }
        }
        
        /// <remarks/>
        public BadTaskEditableData[] badTaskEditableData {
            get {
                return this.badTaskEditableDataField;
            }
            set {
                this.badTaskEditableDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DatabaseTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SnmpTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UrlTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PingTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PortTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CounterTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HttpTask))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class Task {
        
        private System.Guid idField;
        
        private string nameField;
        
        private System.DateTime creationTimeField;
        
        private string taskTypeField;
        
        private bool enabledField;
        
        private int intervalField;
        
        private System.DateTime upFromTimeField;
        
        private bool lastStateField;
        
        private System.DateTime lastStateChangeTimeField;
        
        private bool openStatEnabledField;
        
        private bool fullLogEnabledField;
        
        private string disablenceReasonField;
        
        private System.Nullable<System.DateTime> disablenceTimeField;
        
        private bool holdResultsField;
        
        private bool agentStatField;
        
        private string[] billingOverlimitsField;
        
        private string[] tagsField;
        
        private Subscription[] subscriptionsField;
        
        private TaskStats statsField;
        
        private string[] agentPoolsField;
        
        private bool deletedField;
        
        private DnsBlackListCheck dnsblField;
        
        /// <remarks/>
        public System.Guid id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime creationTime {
            get {
                return this.creationTimeField;
            }
            set {
                this.creationTimeField = value;
            }
        }
        
        /// <remarks/>
        public string taskType {
            get {
                return this.taskTypeField;
            }
            set {
                this.taskTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        public int interval {
            get {
                return this.intervalField;
            }
            set {
                this.intervalField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime upFromTime {
            get {
                return this.upFromTimeField;
            }
            set {
                this.upFromTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool lastState {
            get {
                return this.lastStateField;
            }
            set {
                this.lastStateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime lastStateChangeTime {
            get {
                return this.lastStateChangeTimeField;
            }
            set {
                this.lastStateChangeTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool openStatEnabled {
            get {
                return this.openStatEnabledField;
            }
            set {
                this.openStatEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool fullLogEnabled {
            get {
                return this.fullLogEnabledField;
            }
            set {
                this.fullLogEnabledField = value;
            }
        }
        
        /// <remarks/>
        public string disablenceReason {
            get {
                return this.disablenceReasonField;
            }
            set {
                this.disablenceReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> disablenceTime {
            get {
                return this.disablenceTimeField;
            }
            set {
                this.disablenceTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool holdResults {
            get {
                return this.holdResultsField;
            }
            set {
                this.holdResultsField = value;
            }
        }
        
        /// <remarks/>
        public bool agentStat {
            get {
                return this.agentStatField;
            }
            set {
                this.agentStatField = value;
            }
        }
        
        /// <remarks/>
        public string[] billingOverlimits {
            get {
                return this.billingOverlimitsField;
            }
            set {
                this.billingOverlimitsField = value;
            }
        }
        
        /// <remarks/>
        public string[] tags {
            get {
                return this.tagsField;
            }
            set {
                this.tagsField = value;
            }
        }
        
        /// <remarks/>
        public Subscription[] subscriptions {
            get {
                return this.subscriptionsField;
            }
            set {
                this.subscriptionsField = value;
            }
        }
        
        /// <remarks/>
        public TaskStats stats {
            get {
                return this.statsField;
            }
            set {
                this.statsField = value;
            }
        }
        
        /// <remarks/>
        public string[] agentPools {
            get {
                return this.agentPoolsField;
            }
            set {
                this.agentPoolsField = value;
            }
        }
        
        /// <remarks/>
        public bool deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        public DnsBlackListCheck dnsbl {
            get {
                return this.dnsblField;
            }
            set {
                this.dnsblField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class Subscription {
        
        private string[] alertTypesField;
        
        private string[] reportTypesField;
        
        private System.Guid[] taskIdsField;
        
        private System.Guid[] contactIdsField;
        
        /// <remarks/>
        public string[] alertTypes {
            get {
                return this.alertTypesField;
            }
            set {
                this.alertTypesField = value;
            }
        }
        
        /// <remarks/>
        public string[] reportTypes {
            get {
                return this.reportTypesField;
            }
            set {
                this.reportTypesField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid[] taskIds {
            get {
                return this.taskIdsField;
            }
            set {
                this.taskIdsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid[] contactIds {
            get {
                return this.contactIdsField;
            }
            set {
                this.contactIdsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class TaskStats {
        
        private double dailyField;
        
        private double monthlyField;
        
        private double yearlyField;
        
        private double totalField;
        
        /// <remarks/>
        public double daily {
            get {
                return this.dailyField;
            }
            set {
                this.dailyField = value;
            }
        }
        
        /// <remarks/>
        public double monthly {
            get {
                return this.monthlyField;
            }
            set {
                this.monthlyField = value;
            }
        }
        
        /// <remarks/>
        public double yearly {
            get {
                return this.yearlyField;
            }
            set {
                this.yearlyField = value;
            }
        }
        
        /// <remarks/>
        public double total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class DnsBlackListCheck {
        
        private System.DateTime lastCheckedField;
        
        private int intervalField;
        
        private bool lastStateField;
        
        private System.DateTime lastStateChangeTimeField;
        
        /// <remarks/>
        public System.DateTime lastChecked {
            get {
                return this.lastCheckedField;
            }
            set {
                this.lastCheckedField = value;
            }
        }
        
        /// <remarks/>
        public int interval {
            get {
                return this.intervalField;
            }
            set {
                this.intervalField = value;
            }
        }
        
        /// <remarks/>
        public bool lastState {
            get {
                return this.lastStateField;
            }
            set {
                this.lastStateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime lastStateChangeTime {
            get {
                return this.lastStateChangeTimeField;
            }
            set {
                this.lastStateChangeTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class DatabaseTask : Task {
        
        private string serverTypeField;
        
        private string serverField;
        
        private int serverPortField;
        
        private string serviceField;
        
        private string databaseField;
        
        private string loginField;
        
        private string passwordField;
        
        private string queryField;
        
        private string queryModeField;
        
        private string comparisonModeField;
        
        private string value1Field;
        
        private string value2Field;
        
        private bool includeValue1Field;
        
        private bool includeValue2Field;
        
        /// <remarks/>
        public string serverType {
            get {
                return this.serverTypeField;
            }
            set {
                this.serverTypeField = value;
            }
        }
        
        /// <remarks/>
        public string server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        public int serverPort {
            get {
                return this.serverPortField;
            }
            set {
                this.serverPortField = value;
            }
        }
        
        /// <remarks/>
        public string service {
            get {
                return this.serviceField;
            }
            set {
                this.serviceField = value;
            }
        }
        
        /// <remarks/>
        public string database {
            get {
                return this.databaseField;
            }
            set {
                this.databaseField = value;
            }
        }
        
        /// <remarks/>
        public string login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string query {
            get {
                return this.queryField;
            }
            set {
                this.queryField = value;
            }
        }
        
        /// <remarks/>
        public string queryMode {
            get {
                return this.queryModeField;
            }
            set {
                this.queryModeField = value;
            }
        }
        
        /// <remarks/>
        public string comparisonMode {
            get {
                return this.comparisonModeField;
            }
            set {
                this.comparisonModeField = value;
            }
        }
        
        /// <remarks/>
        public string value1 {
            get {
                return this.value1Field;
            }
            set {
                this.value1Field = value;
            }
        }
        
        /// <remarks/>
        public string value2 {
            get {
                return this.value2Field;
            }
            set {
                this.value2Field = value;
            }
        }
        
        /// <remarks/>
        public bool includeValue1 {
            get {
                return this.includeValue1Field;
            }
            set {
                this.includeValue1Field = value;
            }
        }
        
        /// <remarks/>
        public bool includeValue2 {
            get {
                return this.includeValue2Field;
            }
            set {
                this.includeValue2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class SnmpTask : Task {
        
        private string hostField;
        
        private string communityField;
        
        private byte snmpVersionField;
        
        private string oidField;
        
        private int portField;
        
        private int retriesField;
        
        private string snmpMethodField;
        
        /// <remarks/>
        public string host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        public string community {
            get {
                return this.communityField;
            }
            set {
                this.communityField = value;
            }
        }
        
        /// <remarks/>
        public byte snmpVersion {
            get {
                return this.snmpVersionField;
            }
            set {
                this.snmpVersionField = value;
            }
        }
        
        /// <remarks/>
        public string oid {
            get {
                return this.oidField;
            }
            set {
                this.oidField = value;
            }
        }
        
        /// <remarks/>
        public int port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        public int retries {
            get {
                return this.retriesField;
            }
            set {
                this.retriesField = value;
            }
        }
        
        /// <remarks/>
        public string snmpMethod {
            get {
                return this.snmpMethodField;
            }
            set {
                this.snmpMethodField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PingTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PortTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CounterTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HttpTask))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class UrlTask : Task {
        
        private string urlField;
        
        private bool checkDnsblField;
        
        private string rawUrlField;
        
        /// <remarks/>
        public string url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        public bool checkDnsbl {
            get {
                return this.checkDnsblField;
            }
            set {
                this.checkDnsblField = value;
            }
        }
        
        /// <remarks/>
        public string rawUrl {
            get {
                return this.rawUrlField;
            }
            set {
                this.rawUrlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class PingTask : UrlTask {
        
        private int delayField;
        
        private byte quantityField;
        
        /// <remarks/>
        public int delay {
            get {
                return this.delayField;
            }
            set {
                this.delayField = value;
            }
        }
        
        /// <remarks/>
        public byte quantity {
            get {
                return this.quantityField;
            }
            set {
                this.quantityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class PortTask : UrlTask {
        
        private string protocolField;
        
        private string patternField;
        
        /// <remarks/>
        public string protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <remarks/>
        public string pattern {
            get {
                return this.patternField;
            }
            set {
                this.patternField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class CounterTask : UrlTask {
        
        private string counterNameField;
        
        private string monitorTypeField;
        
        private string deploymentTypeField;
        
        private string counterTypeField;
        
        private System.Nullable<double> errorLevel1Field;
        
        private System.Nullable<double> errorLevel2Field;
        
        private string errorConditionField;
        
        private int errorCheckCountField;
        
        private string ftpField;
        
        private string ftpLoginField;
        
        private string ftpPasswordField;
        
        private CounterQuery queryField;
        
        /// <remarks/>
        public string counterName {
            get {
                return this.counterNameField;
            }
            set {
                this.counterNameField = value;
            }
        }
        
        /// <remarks/>
        public string monitorType {
            get {
                return this.monitorTypeField;
            }
            set {
                this.monitorTypeField = value;
            }
        }
        
        /// <remarks/>
        public string deploymentType {
            get {
                return this.deploymentTypeField;
            }
            set {
                this.deploymentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string counterType {
            get {
                return this.counterTypeField;
            }
            set {
                this.counterTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> errorLevel1 {
            get {
                return this.errorLevel1Field;
            }
            set {
                this.errorLevel1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> errorLevel2 {
            get {
                return this.errorLevel2Field;
            }
            set {
                this.errorLevel2Field = value;
            }
        }
        
        /// <remarks/>
        public string errorCondition {
            get {
                return this.errorConditionField;
            }
            set {
                this.errorConditionField = value;
            }
        }
        
        /// <remarks/>
        public int errorCheckCount {
            get {
                return this.errorCheckCountField;
            }
            set {
                this.errorCheckCountField = value;
            }
        }
        
        /// <remarks/>
        public string ftp {
            get {
                return this.ftpField;
            }
            set {
                this.ftpField = value;
            }
        }
        
        /// <remarks/>
        public string ftpLogin {
            get {
                return this.ftpLoginField;
            }
            set {
                this.ftpLoginField = value;
            }
        }
        
        /// <remarks/>
        public string ftpPassword {
            get {
                return this.ftpPasswordField;
            }
            set {
                this.ftpPasswordField = value;
            }
        }
        
        /// <remarks/>
        public CounterQuery query {
            get {
                return this.queryField;
            }
            set {
                this.queryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class CounterQuery {
        
        private string counterTypeField;
        
        private string diskLabelOrFileSystemField;
        
        private string socketAddressField;
        
        private int socketPortField;
        
        private string dbConnectionStringField;
        
        private string perfCounterCategoryField;
        
        private string perfCounterNameField;
        
        private string perfCounterInstanceField;
        
        public CounterQuery() {
            this.diskLabelOrFileSystemField = "";
            this.socketAddressField = "";
            this.socketPortField = 80;
            this.dbConnectionStringField = "";
            this.perfCounterCategoryField = "";
            this.perfCounterNameField = "";
            this.perfCounterInstanceField = "";
        }
        
        /// <remarks/>
        public string counterType {
            get {
                return this.counterTypeField;
            }
            set {
                this.counterTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string diskLabelOrFileSystem {
            get {
                return this.diskLabelOrFileSystemField;
            }
            set {
                this.diskLabelOrFileSystemField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string socketAddress {
            get {
                return this.socketAddressField;
            }
            set {
                this.socketAddressField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(80)]
        public int socketPort {
            get {
                return this.socketPortField;
            }
            set {
                this.socketPortField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string dbConnectionString {
            get {
                return this.dbConnectionStringField;
            }
            set {
                this.dbConnectionStringField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string perfCounterCategory {
            get {
                return this.perfCounterCategoryField;
            }
            set {
                this.perfCounterCategoryField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string perfCounterName {
            get {
                return this.perfCounterNameField;
            }
            set {
                this.perfCounterNameField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("")]
        public string perfCounterInstance {
            get {
                return this.perfCounterInstanceField;
            }
            set {
                this.perfCounterInstanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.host-tracker.com/Services")]
    public partial class HttpTask : UrlTask {
        
        private string httpMethodField;
        
        private string userAgentField;
        
        private string refererField;
        
        private string acceptHeaderField;
        
        private string[] keywordsField;
        
        private string keywordModeField;
        
        private int maxResponsePageSizeField;
        
        private int timeoutField;
        
        private string userNameField;
        
        private string passwordField;
        
        private string postParametersField;
        
        private string httpHeadersField;
        
        private string httpBodyField;
        
        private bool followRedirectField;
        
        private bool checkCertificateExpirationField;
        
        private bool checkDomainExpirationField;
        
        private int[] ignoredStatusesField;
        
        /// <remarks/>
        public string httpMethod {
            get {
                return this.httpMethodField;
            }
            set {
                this.httpMethodField = value;
            }
        }
        
        /// <remarks/>
        public string userAgent {
            get {
                return this.userAgentField;
            }
            set {
                this.userAgentField = value;
            }
        }
        
        /// <remarks/>
        public string referer {
            get {
                return this.refererField;
            }
            set {
                this.refererField = value;
            }
        }
        
        /// <remarks/>
        public string acceptHeader {
            get {
                return this.acceptHeaderField;
            }
            set {
                this.acceptHeaderField = value;
            }
        }
        
        /// <remarks/>
        public string[] keywords {
            get {
                return this.keywordsField;
            }
            set {
                this.keywordsField = value;
            }
        }
        
        /// <remarks/>
        public string keywordMode {
            get {
                return this.keywordModeField;
            }
            set {
                this.keywordModeField = value;
            }
        }
        
        /// <remarks/>
        public int maxResponsePageSize {
            get {
                return this.maxResponsePageSizeField;
            }
            set {
                this.maxResponsePageSizeField = value;
            }
        }
        
        /// <remarks/>
        public int timeout {
            get {
                return this.timeoutField;
            }
            set {
                this.timeoutField = value;
            }
        }
        
        /// <remarks/>
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string postParameters {
            get {
                return this.postParametersField;
            }
            set {
                this.postParametersField = value;
            }
        }
        
        /// <remarks/>
        public string httpHeaders {
            get {
                return this.httpHeadersField;
            }
            set {
                this.httpHeadersField = value;
            }
        }
        
        /// <remarks/>
        public string httpBody {
            get {
                return this.httpBodyField;
            }
            set {
                this.httpBodyField = value;
            }
        }
        
        /// <remarks/>
        public bool followRedirect {
            get {
                return this.followRedirectField;
            }
            set {
                this.followRedirectField = value;
            }
        }
        
        /// <remarks/>
        public bool checkCertificateExpiration {
            get {
                return this.checkCertificateExpirationField;
            }
            set {
                this.checkCertificateExpirationField = value;
            }
        }
        
        /// <remarks/>
        public bool checkDomainExpiration {
            get {
                return this.checkDomainExpirationField;
            }
            set {
                this.checkDomainExpirationField = value;
            }
        }
        
        /// <remarks/>
        public int[] ignoredStatuses {
            get {
                return this.ignoredStatusesField;
            }
            set {
                this.ignoredStatusesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetTaskWithUrlCompletedEventHandler(object sender, GetTaskWithUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskWithUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskWithUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetTasksWithUrlsCompletedEventHandler(object sender, GetTasksWithUrlsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksWithUrlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksWithUrlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateStatusForTaskWithUrlCompletedEventHandler(object sender, UpdateStatusForTaskWithUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateStatusForTaskWithUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateStatusForTaskWithUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateStatusForTasksWithUrlsCompletedEventHandler(object sender, UpdateStatusForTasksWithUrlsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateStatusForTasksWithUrlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateStatusForTasksWithUrlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateUrlForTaskWithUrlCompletedEventHandler(object sender, UpdateUrlForTaskWithUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUrlForTaskWithUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUrlForTaskWithUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateIntervalForTaskWithUrlCompletedEventHandler(object sender, UpdateIntervalForTaskWithUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateIntervalForTaskWithUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateIntervalForTaskWithUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateIntervalForTasksWithUrlsCompletedEventHandler(object sender, UpdateIntervalForTasksWithUrlsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateIntervalForTasksWithUrlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateIntervalForTasksWithUrlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdatePostDataForPostTaskWithUrlCompletedEventHandler(object sender, UpdatePostDataForPostTaskWithUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePostDataForPostTaskWithUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePostDataForPostTaskWithUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdatePostDataForPostTasksWithUrlsCompletedEventHandler(object sender, UpdatePostDataForPostTasksWithUrlsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePostDataForPostTasksWithUrlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePostDataForPostTasksWithUrlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteTaskWithUrlCompletedEventHandler(object sender, DeleteTaskWithUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskWithUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskWithUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteTaskWithUrlsCompletedEventHandler(object sender, DeleteTaskWithUrlsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskWithUrlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskWithUrlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateHttpHeadTaskCompletedEventHandler(object sender, CreateHttpHeadTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateHttpHeadTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateHttpHeadTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateHttpHeadTasksCompletedEventHandler(object sender, CreateHttpHeadTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateHttpHeadTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateHttpHeadTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BatchTaskOperationResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BatchTaskOperationResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateHttpGetTaskCompletedEventHandler(object sender, CreateHttpGetTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateHttpGetTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateHttpGetTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateHttpGetTasksCompletedEventHandler(object sender, CreateHttpGetTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateHttpGetTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateHttpGetTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BatchTaskOperationResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BatchTaskOperationResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateHttpPostTaskCompletedEventHandler(object sender, CreateHttpPostTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateHttpPostTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateHttpPostTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateHttpPostTasksWithSamePostDataCompletedEventHandler(object sender, CreateHttpPostTasksWithSamePostDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateHttpPostTasksWithSamePostDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateHttpPostTasksWithSamePostDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BatchTaskOperationResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BatchTaskOperationResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateTaskUrlCompletedEventHandler(object sender, UpdateTaskUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTaskUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTaskUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateTaskIntervalCompletedEventHandler(object sender, UpdateTaskIntervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTaskIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTaskIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591